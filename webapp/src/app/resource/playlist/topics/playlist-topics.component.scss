@import "colors";
@import "spacing";
@import "typography";

:host {

  .topics-container {

    padding-top: $spacer;
    margin-bottom: $spacer-lg;
    margin-left: 2rem;
    position: relative;
    overflow: visible;

    h2 {
      font-size: $font-size-4;
      font-weight: 500;
      line-height: 117%;
    }

    .leading-icon {

      i, svg {
        color: $brand-blue;
        background: url('/assets/images/blue-spot.png') no-repeat;
        background-size: contain;
        padding: 7px;
        margin-bottom: -7px;
        margin-left: -16px;
        font-size: $font-size-4;
      }

      sbdl-tooltip sbdl-icon {
        color: $info-500;
      }
    }

    .progressions-table {
      border-spacing: 0;
      margin-bottom: $spacer-xl;

      .progressions-info {
        border-bottom: solid 1px $neutral-100;
        border-left: solid 2rem $white;
        font-size: $font-size-0;
        font-weight: normal;
        letter-spacing: 0.08em;
        text-align: center;
        text-transform: uppercase;
        white-space: nowrap;
      }

      .table-header th,
      .table-header td {
        border-bottom: solid 1px $neutral-100;
      }

      .table-header th:not([class^="scale"]) {
        background-color: $neutral-50;
        border-radius: 4px 4px 0 0;
        min-width: 8rem;
        padding: $spacer-sm;
        text-align: right;
        width: 21%;

        h3 {
          font-size: $font-size-body;
          line-height: 130%;
        }
      }

      tr.highlighted ::ng-deep {
        th, td {
          background-color: transparent;
        }
      }

      .scale {
        padding: $spacer-sm 0;
        font-weight: normal;

        sbdl-progression-scale-button {
          border-radius: 4px;
          margin-right: $spacer-sm;
        }

      }

      .scale.below {
        padding-left: $spacer;
      }

      tr[sbdl-playlist-topic-row].rowCollapsed {
      }
    }
  }
}

@media only screen {

  // The logic behind the table sizing is complex and brittle. To help keep track
  // of it all correctly, please keep it all together right here. :)

  // First we need to manually constrain the main content column width.
  .topics-container {
    // because we allow the table to overflow the .topics-container the content
    // column in the middle will not shrink enough on it's own to allow the
    // right panel to come into frame at ~1201-1400px. So we need to explicitly
    // tell it how wide the main column should be (and the table will still
    // overflow) The calculation is:
    //
    //     100vw                    // Start with the full width of our viewport
    //     - (var(--nav-width) * 2) // take out the two side panels
    //     - 4rem                   // take out the main navigation panel
    //     - 6rem                   // take out the resource content padding
    --container-width: calc(100vw - (var(--nav-width) * 2) - 10rem);
    width: var(--container-width);

  }

  // Second we need to explicitly tell the table to overflow that width by a
  // certain amount (depends on the view width and side-panel sizes)
  .topics-container .progressions-table {
    // The table's width is calculated as:
    //
    // 80vw                       // Start with almost the whole screen.
    // - (var(--nav-width) * 2)   // take out the width of the side panels
    // + 8rem                     // Add back in the width of resource margins
    //                            // and padding because we don't care about it
    //                            // here
    --table-width: calc(80vw - (var(--nav-width) * 2) + 8rem);
    max-width: none;
    width: var(--table-width);
  }

  // Finally we need to center the table on the page. This is tricky // because
  // there are three modes:
  //
  // 1. when the main content column is the size of it's max-width.
  //    This value is: var(--measure)
  //
  // 2. when the main content column is less than it's max but the whole page is
  //    still above our 1200px breakpoint. This value is: var(--container-width)
  //
  // 3. when we are below our 1200px breakpoint. In this case we don't need to
  //    overflow the table at all and we can unset the explicit table width and
  //    margin.
  //
  // When we're in reading mode it turns out that scenario 2 almost doesn't
  // happen. With the side panels out of the way the main content itself is able
  // to stay maximized almost entirely until we get below 1200px. For the very
  // small window where 2 does happen the resulting layout is not perfect but is
  // acceptable.
  //
  // This handles reading mode scenarions 1 + 2, as well as full mode scenario 1
  .topics-container .progressions-table {
    margin-left: calc(((var(--table-width) - var(--measure)) / -2) + 2rem);
  }

  // When not in reading more, scencario 2 happens when the view width is between
  // 1664px and 1200px
  @media (max-width: 1664px) {
    .topics-container.full-mode .progressions-table {
      margin-left: calc(((var(--table-width) - var(--container-width)) / -2) - 2rem);
    }
  }

  // This is scenario 3: we can put the table back in regular page layout without
  // needing to manually overflw and recenter it.
  @media (max-width: $breakpoint-lg) {
    :host .topics-container.reading-mode .progressions-table,
    :host .topics-container.full-mode .progressions-table {
      max-width: var(--measure);
      width: unset;
      margin-left: 0;
    }
  }

}

@media only print {
    .progressions-table {
      display: table;
      width: 90vw;
      vertical-align: top;
      line-height: 100%;
      page-break-inside:auto ;
      overflow: visible;
      tr{
        page-break-inside:avoid;
      }
    }
  //firefox browser hack to make content fit on the pdf since firefox has smaller viewport size
  @media (-moz-device-pixel-ratio) {
    @supports (animation: calc(0s)) {
      .progressions-table {
        width:50vw;
      }
    }
  }
}
